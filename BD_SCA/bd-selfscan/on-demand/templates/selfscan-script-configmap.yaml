{{- /* Script is kept outside the Job to avoid YAML parsing pitfalls. */ -}}
{{- $ns := default .Release.Namespace .Values.target.namespace -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "selfscan.name" . }}-script
  namespace: {{ $ns }}
data:
  run.sh: |-
    #!/bin/sh
    set -euo pipefail

    echo "[selfscan] installing tools..."
    apk add --no-cache curl jq skopeo openjdk17-jre >/dev/null

    echo "[selfscan] installing kubectl..."
    KV=$(curl -sSL https://dl.k8s.io/release/stable.txt)
    curl -fsSL -o /usr/local/bin/kubectl "https://dl.k8s.io/release/${KV}/bin/linux/amd64/kubectl"
    chmod +x /usr/local/bin/kubectl

    echo "[selfscan] waiting for BD URL to respond: ${BD_URL}"
    for i in $(seq 1 60); do
      if curl -sk --max-time 5 "${BD_URL}" >/dev/null 2>&1; then
        echo "[selfscan] BD is reachable"
        break
      fi
      echo "[selfscan] BD not reachable yet, retrying..."
      sleep 5
    done

    echo "[selfscan] discovering images in namespace=${TARGET_NS}, selector='${LABEL_SELECTOR}'"
    PODS_JSON=$(kubectl -n "${TARGET_NS}" get pods -l "${LABEL_SELECTOR}" -o json || true)
    IMAGES=$(echo "${PODS_JSON}" | jq -r '
      [
        (.items[].spec.containers[]?.image),
        (.items[].spec.initContainers[]?.image)
      ] | map(select(. != null)) | unique[]' || true)

    if [ -z "${IMAGES}" ]; then
      echo "[selfscan] no images found by selector; exiting 0"
      exit 0
    fi

    echo "[selfscan] found images:"
    echo "${IMAGES}" | sed 's/^/  - /'

    # derive parent project/version
    if [ -n "${DETECT_PARENT_PROJECT}" ]; then
      PARENT_PROJECT="${DETECT_PARENT_PROJECT}"
    else
      PARENT_PROJECT=$(echo "${LABEL_SELECTOR}" | sed -n 's/.*app=\([^,]*\).*/\1/p')
      [ -z "${PARENT_PROJECT}" ] && PARENT_PROJECT="selfscan"
    fi

    if [ -n "${DETECT_PARENT_VERSION}" ]; then
      PARENT_VERSION="${DETECT_PARENT_VERSION}"
    else
      PARENT_VERSION=$(echo "${PODS_JSON}" | jq -r '.items[0].metadata.labels.version // empty')
      [ -z "${PARENT_VERSION}" ] && PARENT_VERSION="current"
    fi

    echo "[selfscan] parent: ${PARENT_PROJECT}  version: ${PARENT_VERSION}"

    # base props (service mode + shared dir)
    cat >/tmp/base.props <<EOF
    blackduck.url=${BD_URL}
    blackduck.api.token=${BD_TOKEN}
    blackduck.trust.cert=${TRUST_CERT}
    detect.wait.for.results=true
    detect.tools=DOCKER
    detect.docker.passthrough.imageinspector.service.url=${INSPECTOR_URL}
    detect.docker.passthrough.imageinspector.service.start=false
    detect.docker.passthrough.shared.dir.path.local=${SHARED_LOCAL}
    detect.docker.passthrough.shared.dir.path.imageinspector=${SHARED_REMOTE}
    EOF
    if [ -n "${PROJECT_GROUP}" ]; then
      echo "detect.project.group.name=${PROJECT_GROUP}" >> /tmp/base.props
    fi

    DETECT=/tmp/detect.sh
    curl -fsSL https://detect.blackduck.com/detect10.sh -o "${DETECT}"
    chmod +x "${DETECT}"

    mkdir -p "${SHARED_LOCAL}/target"
    FAIL=0

    echo "${IMAGES}" | while read -r IMAGE; do
      [ -z "${IMAGE}" ] && continue
      echo "-----------------------------------------------"
      echo "[selfscan] Inspecting ${IMAGE}"

      REPO=$(printf "%s" "${IMAGE}" | cut -d@ -f1 | cut -d: -f1)
      MICROSVC=$(basename "${REPO}")

      TAG=$(printf "%s" "${IMAGE}" | awk -F: 'NF>1{print $NF}')
      if [ -n "${TAG}" ] && [ "${TAG}" != "${IMAGE}" ]; then
        VERSION_NAME="${TAG}"
      else
        DIGEST=$(skopeo inspect docker://"${IMAGE}" 2>/dev/null | jq -r '.Digest')
        if [ -z "${DIGEST}" ] || [ "${DIGEST}" = "null" ]; then
          DIGEST=$(skopeo inspect --raw "docker://${IMAGE}" 2>/dev/null | sha256sum | awk '{print $1}')
        fi
        SHORT=$(printf '%s' "${DIGEST#sha256:}" | cut -c1-12)
        VERSION_NAME="img-${SHORT}"
      fi

      TAR="${SHARED_LOCAL}/target/${MICROSVC}-${VERSION_NAME}.tar"
      echo "[selfscan] saving image to ${TAR}"
      skopeo copy docker://"${IMAGE}" docker-archive:"${TAR}:${IMAGE}"

      cat >/tmp/run.props <<EOF
      detect.project.parent.name=${PARENT_PROJECT}
      detect.project.parent.version.name=${PARENT_VERSION}
      detect.project.name=${MICROSVC}
      detect.project.version.name=${VERSION_NAME}
      detect.docker.tar=${TAR}
      detect.policy.check.fail.on.severities=${POLICY_FAIL_SEVS}
      EOF

      cat /tmp/base.props /tmp/run.props > /tmp/detect.props
      echo "[selfscan] run Detect for ${MICROSVC}:${VERSION_NAME}"
      set +e
      "${DETECT}" --detect.configuration.file=/tmp/detect.props
      RC=$?
      set -e
      if [ $RC -ne 0 ]; then
        echo "[selfscan][FAIL] Detect exited ${RC} for ${IMAGE}"
        FAIL=1
        continue
      fi
      echo "[selfscan][PASS] ${IMAGE}"
    done

    if [ $FAIL -ne 0 ]; then
      echo "[selfscan] one or more images failed; marking Job failed"
      exit 1
    fi

    if [ "${ANNOTATE}" = "true" ]; then
      echo "[selfscan] annotating workloads as pass"
      for KIND in deployments statefulsets daemonsets; do
        kubectl -n "${TARGET_NS}" get ${KIND} -l "${LABEL_SELECTOR}" -o name | while read -r RES; do
          kubectl -n "${TARGET_NS}" annotate "${RES}" \
            "${ANNO_KEY}=${ANNO_VALUE}" \
            "blackduck.synopsys.com/parent=${PARENT_PROJECT}" \
            "blackduck.synopsys.com/parent-version=${PARENT_VERSION}" \
            --overwrite || true
        done
      done
    fi

    echo "[selfscan] all images scanned successfully"
