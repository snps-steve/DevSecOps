apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "selfscan.name" . }}-script
  namespace: {{ .Values.target.namespace | default .Release.Namespace }}
data:
  bdsc-container-scan.sh: |
    #!/bin/sh
    set -euo pipefail

    echo "Starting BDSC Container Scanner for MicroK8s"
    echo "Target namespace: ${TARGET_NS}"
    echo "Label selector: ${LABEL_SELECTOR}"
    echo "Black Duck URL: ${BD_URL}"

    # Install tools
    apk add --no-cache curl jq bash coreutils openjdk17-jre skopeo

    # Install kubectl
    curl -fsSL -o /usr/local/bin/kubectl \
      "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x /usr/local/bin/kubectl

    # Configure registry auth if provided
    if [ -n "${REGISTRY_SECRET_PATH:-}" ] && [ -d "${REGISTRY_SECRET_PATH}" ]; then
      mkdir -p ~/.docker
      if [ -f "${REGISTRY_SECRET_PATH}/.dockerconfigjson" ]; then
        cp "${REGISTRY_SECRET_PATH}/.dockerconfigjson" ~/.docker/config.json
      fi
    fi

    # Test Black Duck connectivity
    if ! curl -sk --max-time 10 "${BD_URL}/api/current-version"; then
      echo "Cannot reach Black Duck at ${BD_URL}"
      exit 1
    fi

    # Download Detect
    curl -fsSL https://detect.synopsys.com/detect10.sh -o /tmp/detect.sh
    chmod +x /tmp/detect.sh

    # Get container images
    PODS_JSON=$(kubectl -n "${TARGET_NS}" get pods -l "${LABEL_SELECTOR}" -o json || echo '{"items":[]}')

    IMAGES=$(echo "${PODS_JSON}" | jq -r '[(.items[].spec.containers[]?.image // empty), (.items[].spec.initContainers[]?.image // empty)] | map(select(. != null and . != "")) | unique | .[]' || echo "")

    if [ -z "${IMAGES}" ]; then
      echo "No container images found"
      exit 0
    fi

    echo "Found images:"
    echo "${IMAGES}"

    # Set parent project details
    PARENT_PROJECT="${DETECT_PARENT_PROJECT:-kubernetes-workload}"
    PARENT_VERSION="${DETECT_PARENT_VERSION:-current}"

    echo "Parent project: ${PARENT_PROJECT} v${PARENT_VERSION}"

    # Create parent project
    mkdir -p /tmp/parent-project
    echo "# ${PARENT_PROJECT}" > /tmp/parent-project/README.md
    echo '{"name": "parent", "version": "1.0.0"}' > /tmp/parent-project/package.json

    cd /tmp/parent-project
    bash /tmp/detect.sh \
      --blackduck.url="${BD_URL}" \
      --blackduck.api.token="${BD_TOKEN}" \
      --blackduck.trust.cert="${TRUST_CERT}" \
      --detect.wait.for.results=true \
      --detect.project.name="${PARENT_PROJECT}" \
      --detect.project.version.name="${PARENT_VERSION}" \
      --detect.tools=DETECTOR \
      --logging.level.com.synopsys.integration=INFO || true

    # Scan each container
    mkdir -p /tmp/container-images
    SUCCESS_COUNT=0
    TOTAL_IMAGES=0

    echo "${IMAGES}" | while read -r IMAGE; do
      [ -z "${IMAGE}" ] && continue
      TOTAL_IMAGES=$((TOTAL_IMAGES + 1))

      echo "Scanning container ${TOTAL_IMAGES}: ${IMAGE}"

      # Extract project details
      REPO=$(echo "${IMAGE}" | cut -d@ -f1 | cut -d: -f1)
      PROJECT_NAME=$(basename "${REPO}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

      if echo "${IMAGE}" | grep -q ':'; then
        VERSION_NAME=$(echo "${IMAGE}" | cut -d: -f2- | cut -d@ -f1)
      else
        VERSION_NAME="latest"
      fi

      # Download image
      IMAGE_FILE="/tmp/container-images/${PROJECT_NAME}.tar"
      if skopeo copy "docker://${IMAGE}" "docker-archive:${IMAGE_FILE}:${IMAGE}" --quiet; then
        echo "Downloaded: ${IMAGE}"

        # BDSC Container Scan
        cd /tmp
        bash /tmp/detect.sh \
          --blackduck.url="${BD_URL}" \
          --blackduck.api.token="${BD_TOKEN}" \
          --blackduck.trust.cert="${TRUST_CERT}" \
          --detect.wait.for.results=true \
          --detect.tools=CONTAINER_SCAN \
          --detect.container.scan.file.path="${IMAGE_FILE}" \
          --detect.project.parent.name="${PARENT_PROJECT}" \
          --detect.project.parent.version.name="${PARENT_VERSION}" \
          --detect.project.name="${PROJECT_NAME}" \
          --detect.project.version.name="${VERSION_NAME}" \
          --detect.policy.check.fail.on.severities="${POLICY_FAIL_SEVERITIES}" \
          --logging.level.com.synopsys.integration=INFO

        SCAN_RESULT=$?
        rm -f "${IMAGE_FILE}"

        if [ $SCAN_RESULT -eq 0 ]; then
          echo "SUCCESS: ${IMAGE}"
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        else
          echo "FAILED: ${IMAGE} (exit code: ${SCAN_RESULT})"
        fi
      else
        echo "Failed to download: ${IMAGE}"
      fi
    done

    echo "BDSC Container scanning completed"
    echo "Check Black Duck UI: ${PARENT_PROJECT} -> Child Projects -> Components -> Layers"
