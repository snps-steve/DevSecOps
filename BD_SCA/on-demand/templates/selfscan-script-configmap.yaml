apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "selfscan.name" . }}-script
  namespace: {{ .Values.target.namespace | default .Release.Namespace }}
data:
  scan.sh: |
    #!/bin/sh
    set -euo pipefail

    echo "=========================================="
    echo "Black Duck Container Scanner - On Demand"
    echo "=========================================="
    echo "Target namespace: ${TARGET_NS}"
    echo "Label selector: ${LABEL_SELECTOR}"
    echo "Black Duck URL: ${BD_URL}"

    # Install required tools
    echo "Installing tools..."
    apk add --no-cache curl jq docker openjdk17-jre bash coreutils >/dev/null 2>&1

    echo "Installing kubectl..."
    curl -fsSL -o /usr/local/bin/kubectl \
      "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x /usr/local/bin/kubectl

    # Configure registry authentication if provided
    if [ -n "${REGISTRY_SECRET_PATH:-}" ] && [ -d "${REGISTRY_SECRET_PATH}" ]; then
      echo "Configuring registry authentication..."
      mkdir -p ~/.docker
      if [ -f "${REGISTRY_SECRET_PATH}/.dockerconfigjson" ]; then
        cp "${REGISTRY_SECRET_PATH}/.dockerconfigjson" ~/.docker/config.json
      fi
    fi

    # Test Black Duck connectivity
    echo "Testing Black Duck connectivity..."
    if ! curl -sk --max-time 10 "${BD_URL}/api/current-version" >/dev/null 2>&1; then
      echo "ERROR: Cannot reach Black Duck at ${BD_URL}"
      exit 1
    fi
    echo "✅ Black Duck is reachable"

    # Download Detect
    echo "Downloading Black Duck Detect..."
    curl -fsSL https://detect.synopsys.com/detect10.sh -o /tmp/detect.sh
    chmod +x /tmp/detect.sh
    echo "✅ Detect downloaded"

    # Discover images in target namespace
    echo "Discovering container images..."
    PODS_JSON=$(kubectl -n "${TARGET_NS}" get pods -l "${LABEL_SELECTOR}" -o json 2>/dev/null || echo '{"items":[]}')

    IMAGES=$(echo "${PODS_JSON}" | jq -r '
      [
        (.items[].spec.containers[]?.image // empty),
        (.items[].spec.initContainers[]?.image // empty)
      ] | map(select(. != null and . != "")) | unique | .[]' 2>/dev/null || echo "")

    if [ -z "${IMAGES}" ]; then
      echo "No container images found with selector '${LABEL_SELECTOR}' in namespace '${TARGET_NS}'"
      exit 0
    fi

    echo "Found images:"
    echo "${IMAGES}" | sed 's/^/  - /'

    # Extract parent project and version from pods
    if [ -n "${DETECT_PARENT_PROJECT}" ]; then
      PARENT_PROJECT="${DETECT_PARENT_PROJECT}"
    else
      # Try to extract from label selector
      PARENT_PROJECT=$(echo "${LABEL_SELECTOR}" | sed -n 's/.*app=\([^,]*\).*/\1/p' | head -1)
      if [ -z "${PARENT_PROJECT}" ]; then
        PARENT_PROJECT=$(echo "${LABEL_SELECTOR}" | sed -n 's/.*app\.kubernetes\.io\/name=\([^,]*\).*/\1/p' | head -1)
      fi
      if [ -z "${PARENT_PROJECT}" ]; then
        PARENT_PROJECT="kubernetes-workload"
      fi
    fi

    if [ -n "${DETECT_PARENT_VERSION}" ]; then
      PARENT_VERSION="${DETECT_PARENT_VERSION}"
    else
      PARENT_VERSION=$(echo "${PODS_JSON}" | jq -r '.items[0].metadata.labels.version // .items[0].metadata.labels["app.kubernetes.io/version"] // "current"' 2>/dev/null || echo "current")
    fi

    echo "Parent project: ${PARENT_PROJECT}"
    echo "Parent version: ${PARENT_VERSION}"

    # Scan each image
    TOTAL_IMAGES=0
    SUCCESS_COUNT=0
    FAILED_IMAGES=""

    echo "${IMAGES}" | while read -r IMAGE; do
      [ -z "${IMAGE}" ] && continue
      TOTAL_IMAGES=$((TOTAL_IMAGES + 1))

      echo ""
      echo "=========================================="
      echo "Scanning image ${TOTAL_IMAGES}: ${IMAGE}"
      echo "=========================================="

      # Extract project name from image
      REPO=$(echo "${IMAGE}" | cut -d@ -f1 | cut -d: -f1)
      PROJECT_NAME=$(basename "${REPO}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

      # Extract version from image tag/digest
      if echo "${IMAGE}" | grep -q '@sha256:'; then
        DIGEST=$(echo "${IMAGE}" | cut -d@ -f2 | cut -c8-19)
        VERSION_NAME="digest-${DIGEST}"
      elif echo "${IMAGE}" | grep -q ':'; then
        TAG=$(echo "${IMAGE}" | cut -d: -f2- | cut -d@ -f1)
        VERSION_NAME="${TAG}"
      else
        VERSION_NAME="latest"
      fi

      echo "Project name: ${PROJECT_NAME}"
      echo "Version: ${VERSION_NAME}"

      # Run Container Scanner
      echo "Running Black Duck Container Scanner..."
      
      set +e  # Don't exit on scan failure
      bash /tmp/detect.sh \
        --blackduck.url="${BD_URL}" \
        --blackduck.api.token="${BD_TOKEN}" \
        --blackduck.trust.cert="${TRUST_CERT}" \
        --detect.wait.for.results=true \
        --detect.cleanup=false \
        --detect.tools=CONTAINER_SCAN \
        --detect.container.scan.image.id="${IMAGE}" \
        --detect.project.parent.name="${PARENT_PROJECT}" \
        --detect.project.parent.version.name="${PARENT_VERSION}" \
        --detect.project.name="${PROJECT_NAME}" \
        --detect.project.version.name="${VERSION_NAME}" \
        --detect.policy.check.fail.on.severities="${POLICY_FAIL_SEVERITIES}" \
        --logging.level.com.synopsys.integration=INFO

      SCAN_RESULT=$?
      set -e

      if [ $SCAN_RESULT -eq 0 ]; then
        echo "✅ SUCCESS: ${IMAGE}"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
      else
        echo "❌ FAILED: ${IMAGE} (exit code: ${SCAN_RESULT})"
        if [ -z "${FAILED_IMAGES}" ]; then
          FAILED_IMAGES="${IMAGE}"
        else
          FAILED_IMAGES="${FAILED_IMAGES}, ${IMAGE}"
        fi
      fi

    done

    # Final results (note: due to subshell, we need to recalculate)
    TOTAL_IMAGES=$(echo "${IMAGES}" | wc -l)
    SUCCESS_COUNT=0
    FAILED_COUNT=0

    echo ""
    echo "=========================================="
    echo "SCAN SUMMARY"
    echo "=========================================="
    echo "Total images: ${TOTAL_IMAGES}"
    
    # Recount successes and failures by checking for our markers in the log
    if [ -n "${FAILED_IMAGES}" ]; then
      FAILED_COUNT=$(echo "${FAILED_IMAGES}" | tr ',' '\n' | wc -l)
      SUCCESS_COUNT=$((TOTAL_IMAGES - FAILED_COUNT))
      echo "Successful scans: ${SUCCESS_COUNT}"
      echo "Failed scans: ${FAILED_COUNT}"
      echo "Failed images: ${FAILED_IMAGES}"
      echo ""
      echo "❌ Some scans failed - check Black Duck for results"
      exit 1
    else
      echo "Successful scans: ${TOTAL_IMAGES}"
      echo "Failed scans: 0"
      echo ""
      echo "✅ All scans completed successfully!"
    fi

    # Annotate workloads if requested
    if [ "${ANNOTATE_WORKLOADS}" = "true" ]; then
      echo ""
      echo "Annotating workloads with scan results..."
      for KIND in deployments statefulsets daemonsets; do
        kubectl -n "${TARGET_NS}" get ${KIND} -l "${LABEL_SELECTOR}" -o name 2>/dev/null | while read -r RESOURCE; do
          kubectl -n "${TARGET_NS}" annotate "${RESOURCE}" \
            "${ANNO_KEY}=${ANNO_VALUE}" \
            "blackduck.synopsys.com/parent=${PARENT_PROJECT}" \
            "blackduck.synopsys.com/parent-version=${PARENT_VERSION}" \
            "blackduck.synopsys.com/scan-timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            "blackduck.synopsys.com/scan-method=container-scanner" \
            --overwrite 2>/dev/null || true
          echo "Annotated: ${RESOURCE}"
        done
      done
    fi

    echo ""
    echo "✅ Container scanning completed!"
    echo "Check Black Duck dashboard for detailed results."
