apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "selfscan.name" . }}-script
  namespace: {{ .Values.target.namespace | default .Release.Namespace }}
data:
  run.sh: |
    #!/bin/sh
    set -euo pipefail

    echo "[selfscan] Starting Black Duck selfscan job with Container Scanner"
    echo "[selfscan] Target namespace ${TARGET_NS}"
    echo "[selfscan] Label selector ${LABEL_SELECTOR}"

    echo "[selfscan] Installing tools..."
    apk add --no-cache curl jq docker skopeo openjdk17-jre coreutils bash >/dev/null 2>&1

    echo "[selfscan] Installing kubectl..."
    KV=$(curl -sSL https://dl.k8s.io/release/stable.txt)
    curl -fsSL -o /usr/local/bin/kubectl "https://dl.k8s.io/release/${KV}/bin/linux/amd64/kubectl"
    chmod +x /usr/local/bin/kubectl

    # Verify the secret exists and has the expected keys
    echo "[selfscan] Verifying Black Duck credentials secret..."
    if kubectl get secret ${BD_TOKEN_SECRET} -n ${TARGET_NS} >/dev/null 2>&1; then
      echo "[selfscan] Secret '${BD_TOKEN_SECRET}' exists"
      kubectl get secret ${BD_TOKEN_SECRET} -n ${TARGET_NS} -o jsonpath='{.data}' | jq 'keys'
    else
      echo "[selfscan] ERROR: Secret '${BD_TOKEN_SECRET}' not found in namespace ${TARGET_NS}"
      exit 1
    fi

    # Configure registry authentication if provided
    if [ -n "${REGISTRY_SECRET_PATH:-}" ] && [ -d "${REGISTRY_SECRET_PATH}" ]; then
      echo "[selfscan] Configuring registry authentication..."
      mkdir -p ~/.docker
      if [ -f "${REGISTRY_SECRET_PATH}/.dockerconfigjson" ]; then
        cp "${REGISTRY_SECRET_PATH}/.dockerconfigjson" ~/.docker/config.json
      fi
    fi

    echo "[selfscan] Waiting for Black Duck URL to respond ${BD_URL}"
    for i in $(seq 1 60); do
      if curl -sk --max-time 10 "${BD_URL}/api/current-version" >/dev/null 2>&1; then
        echo "[selfscan] Black Duck is reachable"
        break
      fi
      echo "[selfscan] Black Duck not reachable yet, retrying in 5s..."
      sleep 5
      if [ $i -eq 60 ]; then
        echo "[selfscan] ERROR Black Duck is not reachable after 5 minutes"
        exit 1
      fi
    done

    # Download Detect
    DETECT=/tmp/detect.sh
    echo "[selfscan] Downloading Black Duck Detect..."
    curl -fsSL https://detect.blackduck.com/detect10.sh -o "${DETECT}"
    chmod +x "${DETECT}"

    echo "[selfscan] âœ… Black Duck connectivity verified (credentials and URL are working)"

    echo "[selfscan] Discovering images in namespace=${TARGET_NS}, selector=${LABEL_SELECTOR}"
    PODS_JSON=$(kubectl -n "${TARGET_NS}" get pods -l "${LABEL_SELECTOR}" -o json 2>/dev/null || echo '{"items":[]}')

    if [ "$(echo "${PODS_JSON}" | jq '.items | length')" -eq 0 ]; then
      echo "[selfscan] No pods found matching selector; exiting successfully"
      exit 0
    fi

    IMAGES=$(echo "${PODS_JSON}" | jq -r '
      [
        (.items[].spec.containers[]?.image),
        (.items[].spec.initContainers[]?.image)
      ] | map(select(. != null)) | unique[]' 2>/dev/null || echo "")

    if [ -z "${IMAGES}" ]; then
      echo "[selfscan] No container images found; exiting successfully"
      exit 0
    fi

    echo "[selfscan] Found images"
    echo "${IMAGES}" | sed 's/^/  - /'

    # Derive parent project/version
    if [ -n "${DETECT_PARENT_PROJECT}" ]; then
      PARENT_PROJECT="${DETECT_PARENT_PROJECT}"
    else
      PARENT_PROJECT=$(echo "${LABEL_SELECTOR}" | sed -n 's/.*app=\([^,]*\).*/\1/p' | head -1)
      if [ -z "${PARENT_PROJECT}" ]; then
        PARENT_PROJECT=$(echo "${LABEL_SELECTOR}" | sed -n 's/.*app\.kubernetes\.io\/name=\([^,]*\).*/\1/p' | head -1)
      fi
      if [ -z "${PARENT_PROJECT}" ]; then
        PARENT_PROJECT="kubernetes-scan"
      fi
    fi

    if [ -n "${DETECT_PARENT_VERSION}" ]; then
      PARENT_VERSION="${DETECT_PARENT_VERSION}"
    else
      PARENT_VERSION=$(echo "${PODS_JSON}" | jq -r '.items[0].metadata.labels.version // .items[0].metadata.labels["app.kubernetes.io/version"] // empty' 2>/dev/null || echo "")
      if [ -z "${PARENT_VERSION}" ]; then
        PARENT_VERSION="current"
      fi
    fi

    echo "[selfscan] Parent project ${PARENT_PROJECT}"
    echo "[selfscan] Parent version ${PARENT_VERSION}"

    FAILED_IMAGES=""
    SUCCESS_COUNT=0
    TOTAL_COUNT=0

    echo "${IMAGES}" | while read -r IMAGE; do
      [ -z "${IMAGE}" ] && continue
      TOTAL_COUNT=$((TOTAL_COUNT + 1))

      echo "=============================================="
      echo "[selfscan] Processing image ${TOTAL_COUNT} - ${IMAGE}"

      # Extract repository and tag/digest info
      REPO=$(printf "%s" "${IMAGE}" | cut -d@ -f1 | cut -d: -f1)
      MICROSVC=$(basename "${REPO}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

      # Determine version name
      if echo "${IMAGE}" | grep -q '@sha256'; then
        DIGEST=$(echo "${IMAGE}" | cut -d@ -f2)
        SHORT_DIGEST=$(echo "${DIGEST}" | cut -c8-19)
        VERSION_NAME="digest-${SHORT_DIGEST}"
      elif echo "${IMAGE}" | grep -q ':'; then
        TAG=$(echo "${IMAGE}" | cut -d: -f2- | cut -d@ -f1)
        VERSION_NAME="${TAG}"
      else
        VERSION_NAME="latest"
      fi

      echo "[selfscan] Project ${MICROSVC} Version ${VERSION_NAME}"

      echo "[selfscan] Running Container Scanner for ${MICROSVC} ${VERSION_NAME}..."
      set +e
      
      # Use Container Scanner instead of Docker Inspector
      bash "${DETECT}" \
        --blackduck.url="${BD_URL}" \
        --blackduck.api.token="${BD_TOKEN}" \
        --blackduck.trust.cert="${TRUST_CERT}" \
        --detect.wait.for.results=true \
        --detect.cleanup=false \
        --detect.tools=CONTAINER_SCAN \
        --detect.container.scan.image.id="${IMAGE}" \
        --detect.project.parent.name="${PARENT_PROJECT}" \
        --detect.project.parent.version.name="${PARENT_VERSION}" \
        --detect.project.name="${MICROSVC}" \
        --detect.project.version.name="${VERSION_NAME}" \
        --detect.policy.check.fail.on.severities="${POLICY_FAIL_SEVS}" \
        --logging.level.com.synopsys.integration=INFO
      DETECT_RC=$?
      set -e

      if [ $DETECT_RC -ne 0 ]; then
        echo "[selfscan][FAIL] Container Scanner failed with exit code ${DETECT_RC} for ${IMAGE}"
        FAILED_IMAGES="${FAILED_IMAGES} ${IMAGE}"
      else
        echo "[selfscan][PASS] Successfully scanned ${IMAGE}"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
      fi
    done

    echo "=============================================="
    echo "[selfscan] Scan Summary"
    echo "[selfscan] Total images ${TOTAL_COUNT}"
    echo "[selfscan] Successful ${SUCCESS_COUNT}"

    if [ -n "${FAILED_IMAGES}" ]; then
      echo "[selfscan] Failed images${FAILED_IMAGES}"
      echo "[selfscan] Some scans failed - marking job as failed"
      exit 1
    fi

    # Annotate workloads if requested
    if [ "${ANNOTATE}" = "true" ]; then
      echo "[selfscan] Annotating workloads with scan results..."
      for KIND in deployments statefulsets daemonsets; do
        kubectl -n "${TARGET_NS}" get ${KIND} -l "${LABEL_SELECTOR}" -o name 2>/dev/null | while read -r RES; do
          kubectl -n "${TARGET_NS}" annotate "${RES}" \
            "${ANNO_KEY}=${ANNO_VALUE}" \
            "blackduck.synopsys.com/parent=${PARENT_PROJECT}" \
            "blackduck.synopsys.com/parent-version=${PARENT_VERSION}" \
            "blackduck.synopsys.com/scan-timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --overwrite 2>/dev/null || true
        done
      done
    fi

    echo "[selfscan] All images scanned successfully!"
