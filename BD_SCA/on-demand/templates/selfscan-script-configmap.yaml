apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "selfscan.name" . }}-script
  namespace: {{ .Values.target.namespace | default .Release.Namespace }}
data:
  bdsc-container-scan.sh: |
    #!/bin/sh
    set -euo pipefail

    echo "Starting BDSC Container Scanner"
    echo "Target namespace: ${TARGET_NS}"
    echo "Label selector: ${LABEL_SELECTOR}"

    # Install tools
    apk add --no-cache curl jq bash coreutils openjdk17-jre skopeo

    # Install kubectl
    curl -fsSL -o /usr/local/bin/kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x /usr/local/bin/kubectl

    # Test connectivity
    echo "Testing Black Duck connectivity..."
    curl -sk --max-time 10 "${BD_URL}/api/current-version" || exit 1

    # Download Detect
    curl -fsSL https://detect.blackduck.com/detect10.sh -o /tmp/detect.sh
    chmod +x /tmp/detect.sh

    # Get container images
    PODS_JSON=$(kubectl -n "${TARGET_NS}" get pods -l "${LABEL_SELECTOR}" -o json)
    IMAGES=$(echo "${PODS_JSON}" | jq -r '[(.items[].spec.containers[]?.image // empty), (.items[].spec.initContainers[]?.image // empty)] | map(select(. != null and . != "")) | unique | .[]')

    if [ -z "${IMAGES}" ]; then
      echo "No images found with selector '${LABEL_SELECTOR}' in namespace '${TARGET_NS}'"
      exit 0
    fi

    echo "Found $(echo "${IMAGES}" | wc -l) unique images:"
    echo "${IMAGES}" | sed 's/^/  - /'

    # Set project group details
    PROJECT_GROUP="${PROJECT_GROUP:-${DETECT_PARENT_PROJECT:-kubernetes-containers}}"
    echo "Project Group: ${PROJECT_GROUP}"

    # Create Project Group first (if specified)
    if [ -n "${PROJECT_GROUP}" ]; then
      echo "Creating/ensuring Project Group exists: ${PROJECT_GROUP}"
      
      # Simple approach: Try to create a temporary project in the group
      # This will create the group if it doesn't exist
      mkdir -p /tmp/group-project
      cd /tmp/group-project
      echo "Temporary project to ensure group exists" > README.txt
      
      bash /tmp/detect.sh \
        --blackduck.url="${BD_URL}" \
        --blackduck.api.token="${BD_TOKEN}" \
        --blackduck.trust.cert="${TRUST_CERT}" \
        --detect.wait.for.results=false \
        --detect.project.name="temp-group-creator" \
        --detect.project.version.name="temp" \
        --detect.project.group.name="${PROJECT_GROUP}" \
        --detect.tools=NONE \
        --detect.project.tier="4" \
        --logging.level.com.synopsys.integration=WARN
      
      echo "Project Group setup completed"
    fi

    # Function to sanitize project names
    sanitize_project_name() {
      local name="$1"
      name=$(echo "$name" | sed 's|.*/||' | sed 's/:.*$//')
      name=$(echo "$name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
      [ -z "$name" ] && name="unknown-image"
      [ ${#name} -gt 100 ] && name="${name:0:100}"
      echo "$name"
    }

    # Function to extract version from image
    extract_version() {
      local image="$1"
      if echo "$image" | grep -q ':'; then
        echo "$image" | cut -d: -f2- | cut -d@ -f1
      elif echo "$image" | grep -q '@'; then
        echo "$image" | cut -d@ -f2 | cut -c1-12
      else
        echo "latest"
      fi
    }

    # Scan each container
    echo "Starting container image scanning..."
    mkdir -p /tmp/container-images
    SUCCESS_COUNT=0
    TOTAL_IMAGES=0

    echo "${IMAGES}" | while read -r IMAGE; do
      [ -z "${IMAGE}" ] && continue
      TOTAL_IMAGES=$((TOTAL_IMAGES + 1))

      echo ""
      echo "=== Scanning container ${TOTAL_IMAGES}: ${IMAGE} ==="

      PROJECT_NAME=$(sanitize_project_name "${IMAGE}")
      VERSION_NAME=$(extract_version "${IMAGE}")

      echo "  Project Name: ${PROJECT_NAME}"
      echo "  Version: ${VERSION_NAME}"
      echo "  Project Group: ${PROJECT_GROUP}"

      IMAGE_FILE="/tmp/container-images/${PROJECT_NAME}-${TOTAL_IMAGES}.tar"
      echo "  Downloading image..."
      
      DOWNLOAD_SUCCESS=false
      for attempt in 1 2 3; do
        echo "  Download attempt ${attempt}/3..."
        if timeout 600 skopeo copy "docker://${IMAGE}" "docker-archive:${IMAGE_FILE}:${IMAGE}" --quiet 2>/dev/null; then
          echo "  Downloaded: ${IMAGE}"
          DOWNLOAD_SUCCESS=true
          break
        else
          echo "  Download attempt ${attempt} failed"
          sleep 10
        fi
      done

      if [ "$DOWNLOAD_SUCCESS" = "true" ]; then
        if [ ! -f "${IMAGE_FILE}" ] || [ ! -s "${IMAGE_FILE}" ]; then
          echo "  Downloaded file is empty or missing: ${IMAGE_FILE}"
          continue
        fi

        echo "  File size: $(du -h ${IMAGE_FILE} | cut -f1)"
        echo "  Running BDSC container scan..."
        cd /tmp
        
        # Container scan with reduced timeout and proper project group assignment
        bash /tmp/detect.sh \
          --blackduck.url="${BD_URL}" \
          --blackduck.api.token="${BD_TOKEN}" \
          --blackduck.trust.cert="${TRUST_CERT}" \
          --detect.wait.for.results=true \
          --detect.timeout=180000 \
          --detect.tools=CONTAINER_SCAN \
          --detect.container.scan.file.path="${IMAGE_FILE}" \
          --detect.project.name="${PROJECT_NAME}" \
          --detect.project.version.name="${VERSION_NAME}" \
          --detect.project.group.name="${PROJECT_GROUP}" \
          --detect.project.tier="${PROJECT_TIER}" \
          --detect.policy.check.fail.on.severities="${POLICY_FAIL_SEVERITIES}" \
          --detect.project.version.update=true \
          --detect.cleanup=false \
          --detect.project.version.distribution=EXTERNAL \
          --detect.project.version.phase=DEVELOPMENT \
          --logging.level.com.synopsys.integration=INFO

        SCAN_RESULT=$?
        rm -f "${IMAGE_FILE}"

        if [ $SCAN_RESULT -eq 0 ]; then
          echo "  SUCCESS: ${IMAGE}"
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        elif [ $SCAN_RESULT -eq 2 ]; then
          echo "  TIMEOUT: ${IMAGE} - scan uploaded but timed out waiting for BOM completion"
          echo "  (This is often normal for large images - check Black Duck UI for results)"
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        else
          echo "  FAILED: ${IMAGE} (exit code: ${SCAN_RESULT})"
        fi
      else
        echo "  Failed to download after 3 attempts: ${IMAGE}"
      fi

      rm -f /tmp/container-images/${PROJECT_NAME}-${TOTAL_IMAGES}.*

    done

    echo ""
    echo "=== BDSC Container Scanning Summary ==="
    echo "Total images processed: ${TOTAL_IMAGES}"  
    echo "Successful scans: ${SUCCESS_COUNT}"
    echo "Failed scans: $((TOTAL_IMAGES - SUCCESS_COUNT))"
    echo ""
    echo "Black Duck Project Details:"
    echo "  Project Group: ${PROJECT_GROUP}"
    echo "  Project Tier: ${PROJECT_TIER}"
    echo ""
    echo "Check Black Duck UI at: ${BD_URL}"
    echo "Navigate to: Project Groups -> ${PROJECT_GROUP}"
    echo ""

    if [ "${ANNOTATE_WORKLOADS}" = "true" ]; then
      echo "Annotating workloads..."
      kubectl -n "${TARGET_NS}" get deployments,statefulsets,daemonsets -l "${LABEL_SELECTOR}" -o name | while read -r WORKLOAD; do
        if [ -n "${WORKLOAD}" ]; then
          kubectl -n "${TARGET_NS}" annotate "${WORKLOAD}" "${ANNO_KEY}=${ANNO_VALUE}" --overwrite
          echo "Annotated ${WORKLOAD}"
        fi
      done
    fi

    rm -rf /tmp/container-images

    echo ""
    if [ $SUCCESS_COUNT -eq $TOTAL_IMAGES ] && [ $TOTAL_IMAGES -gt 0 ]; then
      echo "BDSC Container scanning completed successfully!"
      exit 0
    elif [ $SUCCESS_COUNT -gt 0 ]; then
      echo "BDSC Container scanning completed with some timeouts/failures. ${SUCCESS_COUNT}/${TOTAL_IMAGES} successful."
      exit 0
    else
      echo "BDSC Container scanning failed. No images were successfully processed."
      exit 1
    fi
