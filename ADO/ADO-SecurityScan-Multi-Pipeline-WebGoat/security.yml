# =============================================================================
# STAGE 3 TEMPLATE: SECURITY SCANS (BLACK DUCK SCA + COVERITY SAST)
# =============================================================================
# Purpose: Comprehensive security scanning using Black Duck SCA and Coverity
# Inputs: WebGoatSource artifact (Stage 1), WebGoatContainerImage artifact (Stage 2)
# Outputs: Security scan results, SARIF files, test results
# Scans: SCA source, SCA container, SAST analysis
# =============================================================================

parameters:
- name: dependsOn
  type: object
  default: []

stages:
- stage: SecurityScans
  displayName: 'Stage 3: Execute Security Scans'
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  # ---- Black Duck SCA: Source Code Analysis ----
  - job: BlackDuckSourceScan
    displayName: 'Black Duck SCA: Source Analysis'
    pool:
      name: 'Self-Hosted ADO Agent'
    steps:
    # Download source code artifacts
    - task: DownloadPipelineArtifact@2
      displayName: 'Download WebGoat Source'
      inputs:
        artifact: 'WebGoatSource'
        path: '$(Build.SourcesDirectory)'

    # Black Duck Source Code Scan (Package Manager + Signature)
    - task: BlackDuckSecurityScan@2.2.0
      displayName: 'Black Duck SCA: Package Manager + Signature Scan'
      continueOnError: true
      retryCountOnTaskFailure: 2
      env:
        DETECT_PROJECT_NAME: $(PROJECT_NAME)
        DETECT_PROJECT_VERSION_NAME: $(PROJECT_VERSION)-source
        DETECT_SELF_UPDATE_DISABLED: "true"
        # Source code analysis: Package manager + Signature scanning
        DETECT_TOOLS: "DETECTOR,SIGNATURE_SCAN"
        DETECT_EXCLUDED_DIRECTORIES: ".git,node_modules,vendor,.idea,.vscode,test,tests,spec,specs"
        DETECT_MAVEN_EXCLUDED_SCOPES: "test,provided"
      inputs:
        BLACKDUCKSCA_URL: $(BLACKDUCK_URL)
        BLACKDUCKSCA_TOKEN: $(BLACKDUCK_API_TOKEN)
        BLACKDUCKSCA_REPORTS_SARIF_CREATE: true
        NETWORK_SSL_TRUSTALL: true
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          BLACKDUCKSCA_FIXPR_ENABLED: true
          BLACKDUCKSCA_PRCOMMENT_ENABLED: true
          azure_token: $(System.AccessToken)

    # Log Black Duck source scan status
    - script: |
        if [ $? -eq 0 ]; then
          echo "SUCCESS: Black Duck SCA source scan completed successfully"
        else
          echo "WARNING: Black Duck SCA source scan failed - this may indicate:"
          echo "  - Black Duck server is unavailable at $(BLACKDUCK_URL)"
          echo "  - Authentication issues with API token"
          echo "  - Network connectivity problems"
          echo "  - Maven dependency resolution issues"
          echo "Pipeline will continue, but source code security scan results may be incomplete"
        fi
      displayName: 'Log Black Duck Source Scan Status'
      condition: always()

  # ---- Black Duck Container Scan ----
  - job: BlackDuckContainerScan
    displayName: 'Black Duck SCA: Container Analysis'
    pool:
      name: 'Self-Hosted ADO Agent'
    steps:
    # Download container image
    - task: DownloadPipelineArtifact@2
      displayName: 'Download WebGoat Container Image'
      inputs:
        artifact: 'WebGoatContainerImage'
        path: '$(Build.SourcesDirectory)'

    # Black Duck Container Scan
    - task: BlackDuckSecurityScan@2.2.0
      displayName: 'Black Duck SCA: Container Scan'
      continueOnError: true
      retryCountOnTaskFailure: 2
      env:
        DETECT_PROJECT_NAME: $(PROJECT_NAME)
        DETECT_PROJECT_VERSION_NAME: $(PROJECT_VERSION)-container
        DETECT_SELF_UPDATE_DISABLED: "true"
        # Container-specific scanning
        DETECT_TOOLS: "CONTAINER_SCAN"
        DETECT_CONTAINER_SCAN_FILE_PATH: "$(Build.SourcesDirectory)/webgoat-$(Build.BuildId).tar"
      inputs:
        BLACKDUCKSCA_URL: $(BLACKDUCK_URL)
        BLACKDUCKSCA_TOKEN: $(BLACKDUCK_API_TOKEN)
        BLACKDUCKSCA_REPORTS_SARIF_CREATE: true
        NETWORK_SSL_TRUSTALL: true

    # Log Black Duck container scan status
    - script: |
        if [ $? -eq 0 ]; then
          echo "SUCCESS: Black Duck SCA container scan completed successfully"
        else
          echo "WARNING: Black Duck SCA container scan failed - this may indicate:"
          echo "  - Black Duck server is unavailable at $(BLACKDUCK_URL)"
          echo "  - Authentication issues with API token"
          echo "  - Network connectivity problems"
          echo "  - BDSC (Black Duck Secure Container) license not available"
          echo "  - Container image file not found or corrupted"
          echo "Pipeline will continue, but container security scan results may be incomplete"
        fi
      displayName: 'Log Black Duck Container Scan Status'
      condition: always()

  # ---- Coverity SAST ----
  - job: CoveritySAST
    displayName: 'Coverity SAST Analysis'
    pool:
      name: 'Self-Hosted ADO Agent'
    steps:
    # Download source code artifacts
    - task: DownloadPipelineArtifact@2
      displayName: 'Download WebGoat Source'
      inputs:
        artifact: 'WebGoatSource'
        path: '$(Build.SourcesDirectory)'

    # JDK sanity check
    - script: |
        java -version
        ./mvnw -v
      displayName: 'JDK Environment Check'

    # Coverity SAST Scan
    - task: BlackDuckSecurityScan@2.2.0
      displayName: 'Coverity SAST Scan'
      continueOnError: true
      retryCountOnTaskFailure: 2
      inputs:
        COVERITY_URL: $(COVERITY_URL)
        COVERITY_USER: $(COV_USER)
        COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
        COVERITY_PROJECT_NAME: $(PROJECT_NAME)
        COVERITY_STREAM_NAME: $(PROJECT_NAME)-$(PROJECT_VERSION)
        COVERITY_REPORTS_SARIF_CREATE: true
        mark_build_status: 'SucceededWithIssues'
        NETWORK_SSL_TRUSTALL: true
        coverity_local: true
        # TESTING: Added coverity_local back, kept coverity_install_directory removed
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          COVERITY_PRCOMMENT_ENABLED: true
          azure_token: $(System.AccessToken)
        ${{ else }}:
          COVERITY_PRCOMMENT_ENABLED: false

    # Log Coverity scan status
    - script: |
        if [ $? -eq 0 ]; then
          echo "SUCCESS: Coverity SAST scan completed successfully"
        else
          echo "WARNING: Coverity SAST scan failed - this may indicate:"
          echo "  - Coverity Connect server is unavailable at $(COVERITY_URL)"
          echo "  - Authentication issues with user credentials"
          echo "  - Network connectivity problems"
          echo "  - Server-side errors (HTTP 500) requiring administrator attention"
          echo "  - Project/stream configuration issues"
          echo "  - Build compilation issues affecting static analysis"
          echo "Pipeline will continue, but SAST scan results may be incomplete"
        fi
      displayName: 'Log Coverity Scan Status'
      condition: always()

    # Debug Coverity SARIF file creation and publish results
    - script: |
        echo "=== Debugging Coverity SARIF File Creation ==="
        echo "Searching for Coverity SARIF files..."
        
        # Check for Coverity-specific SARIF files
        find $(Agent.WorkFolder) -name "*.sarif" -type f 2>/dev/null || echo "No SARIF files found"
        find $(Agent.WorkFolder) -name "*coverity*" -type f 2>/dev/null | head -10
        find $(Agent.WorkFolder) -name "*cov*" -type f 2>/dev/null | head -10
        
        echo "=== Coverity Output Check ==="
        ls -la $(Agent.WorkFolder)/ | head -20
        
        # Check for typical Coverity output directories
        if [ -d "$(Agent.WorkFolder)/coverity" ]; then
          echo "Coverity directory found:"
          find $(Agent.WorkFolder)/coverity -type f | head -10
        fi
        
        if [ -d "$(Agent.WorkFolder)/cov-results" ]; then
          echo "Cov-results directory found:"
          find $(Agent.WorkFolder)/cov-results -type f | head -10
        fi
      displayName: 'Debug Coverity SARIF Files'
      condition: always()

    # Publish Coverity SARIF (if found)
    - task: PublishTestResults@2
      displayName: 'Publish Coverity SARIF'
      condition: always()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: |
          **/*coverity*.sarif
          **/*cov*.sarif
          **/coverity/**/*.sarif
        searchFolder: '$(Agent.WorkFolder)'
        publishRunAttachments: true
        failTaskOnFailedTests: false
        testRunTitle: 'Coverity SAST Scan'
      continueOnError: true

  # ---- Publish All Security Results as Pipeline Artifacts ----
  - job: PublishSecurityArtifacts
    displayName: 'Publish Security Scan Artifacts'
    dependsOn: [BlackDuckSourceScan, BlackDuckContainerScan, CoveritySAST]
    condition: always()
    pool:
      name: 'Self-Hosted ADO Agent'
    steps:
    # Create a summary of what was attempted
    - script: |
        echo "=== Security Scan Summary ==="
        echo "The following security scans were attempted:"
        echo "1. Black Duck SCA Source Scan (Package Manager + Signature)"
        echo "2. Black Duck SCA Container Scan (BDSC)"
        echo "3. Coverity SAST Scan"
        echo ""
        echo "SARIF results are published individually by each scan job."
        echo "Check the 'Tests' tab in Azure DevOps for security findings."
        echo "Check the 'Extensions' tab for additional security tool integration."
        echo ""
        echo "If no SARIF files are found, verify:"
        echo "- Security tool servers are accessible"
        echo "- Authentication credentials are correct"
        echo "- SARIF generation is enabled in tool configuration"
        echo "- Required licenses are available (especially for BDSC)"
      displayName: 'Security Scan Summary'
